/**
 * @copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#include "Pyston/Graph/PythonCall.h"

namespace Pyston {

template<typename R, typename... Args>
ExpressionTree<R(Args...)>
ExpressionTreeBuilder::buildHelper<R(Args...)>::build(const boost::python::object& pyfunc) {
  GILLocker gil_ensure;

  std::shared_ptr<Node<R>> root;
  bool compiled;

  // Try building a computing graph
  try {
    boost::python::list placeholders;
    placeholderHelper<0, Args...>(placeholders);
    auto py_comp = pyfunc(*boost::python::tuple(placeholders));
    root = boost::python::extract<std::shared_ptr<Node<R>>>(py_comp);
    compiled = true;
  }
  // If failed to do so (i.e. placeholder used on a control flow),
  // wrap the call to python
  catch (const boost::python::error_already_set&) {
    PyErr_Clear();
    root = std::make_shared<PythonCall<R>>(pyfunc);
    compiled = false;
  }
  return ExpressionTree<R(Args...)>(compiled, root);
}

template<typename Signature>
struct registerHelper;

template<typename R, typename T>
struct registerHelper<R(T)> {
  static void registerFunction(const std::string& repr, std::function<R(T)> functor) {
    auto ns = boost::python::import("pyston");
    // Add the function for Nodes
    auto function = makeUnary<R(T)>(repr, functor);
    boost::python::objects::add_to_namespace(ns, repr.c_str(), function);

    // Overload for the primitive types, so it can be evaluated even with non compilable expressions
    auto direct = boost::python::make_function(
      functor,
      boost::python::default_call_policies(),
      boost::mpl::vector<R, T>()
    );
    boost::python::objects::add_to_namespace(ns, repr.c_str(), direct);
  }
};

template<typename R, typename T>
struct registerHelper<R(const Context&, T)> {
  static void registerFunction(const std::string& repr, std::function<R(const Context&,T)> functor) {
    auto ns = boost::python::import("pyston");
    // Add the function for Nodes
    auto function = makeUnary<R(const Context&, T)>(repr, functor);
    boost::python::objects::add_to_namespace(ns, repr.c_str(), function);

    // Overload for the primitive types, so it can be evaluated even with non compilable expressions
    auto direct = boost::python::make_function(
      [functor](T v) {
        return functor({}, v);
      },
      boost::python::default_call_policies(),
      boost::mpl::vector<R, T>()
    );
    boost::python::objects::add_to_namespace(ns, repr.c_str(), direct);
  }
};

template<typename Signature>
void ExpressionTreeBuilder::registerFunction(const std::string& repr, std::function<Signature> functor) {
  registerHelper<Signature>::registerFunction(repr, functor);
}

/*
template<typename TL, typename TR, template<class> class Functor>
void ExpressionTreeBuilder::registerFunction(const std::string& repr) {
  auto ns = boost::python::import("pyston");
  // Add the function for Nodes
  auto function = makeBinary<TL, TR, Functor>(repr);
  boost::python::objects::add_to_namespace(ns, repr.c_str(), function);
  // Overload for the primitive types, so it can be evaluated even with non compilable expressions
  using T = TR;
  typedef decltype(std::declval<Functor<T>>()(T(), T())) R;
  auto direct = boost::python::make_function(
    Functor<TR>(),
    boost::python::default_call_policies(),
    boost::mpl::vector<R, TL, TR>()
  );
  boost::python::objects::add_to_namespace(ns, repr.c_str(), direct);
}
*/
} // end of namespace Pyston
