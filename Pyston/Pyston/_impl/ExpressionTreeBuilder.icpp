/**
 * @copyright (C) 2012-2020 Euclid Science Ground Segment
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 3.0 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this library; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */


namespace Pyston {

template<typename R, typename... Args>
auto ExpressionTreeBuilder::buildHelper<R(Args...)>::build(const boost::python::object& pyfunc)
-> std::pair<bool, std::function<R(Args...)>> {
  GILLocker gil_ensure;
  std::function<R(Args...)> functor;
  bool compiled;

  // Try building a computing graph
  try {
    boost::python::list placeholders;
    placeholderHelper<0, Args...>(placeholders);
    auto py_comp = pyfunc(*boost::python::tuple(placeholders));
    boost::python::extract<std::shared_ptr<Node<R>>> extractor(py_comp);
    auto comp = extractor();
    functor = [comp](Args ...args) {
      return comp->eval(args...);
    };
    compiled = true;
  }
    // If failed to do so (i.e. placeholder used on a control flow),
    // wrap the call to python
  catch (const boost::python::error_already_set&) {
    PyErr_Clear();
    functor = [pyfunc](Args ...args) -> R {
      GILLocker inner_gil_ensure;
      try {
        auto res = pyfunc(args...);
        return boost::python::extract<R>(res)();
      }
      catch (const boost::python::error_already_set&) {
        throw Exception();
      }
    };
    compiled = false;
  }
  return std::make_pair(compiled, functor);
}

} // end of namespace Pyston
